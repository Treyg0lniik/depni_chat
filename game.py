import secrets
from telegram import Update
from telegram.ext import ContextTypes
from db import get_user, save_user
from utils import ensure_registered, seconds_until_next_daily, format_timer
import asyncio
import random
from telegram.error import RetryAfter

rooms = {}  # room_code -> room_data

async def safe_edit(msg, text):
    try:
        await msg.edit_text(text)
    except RetryAfter as e:
        await asyncio.sleep(e.retry_after)
        await msg.edit_text(text)
    except:
        pass

@ensure_registered
async def create_room(update, context):
    try:
        amount = int(context.args[0])
    except:
        return await update.message.reply_text("–£–∫–∞–∂–∏ —Å—É–º–º—É –¥–µ–ø–∞: /dap 50")

    user_id = update.effective_user.id
    user = get_user(user_id)
    if user["capybaras"] < amount:
        return await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞–ø–∏–±–∞—Ä –¥–ª—è –¥–µ–ø–∞ :(")

    user["capybaras"] -= amount
    save_user(user_id, user)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã
    room_code = secrets.token_hex(3)  # 6 —Å–∏–º–≤–æ–ª–æ–≤
    room_msg = await update.message.reply_text(
        f"üé≤ –ö–æ–º–Ω–∞—Ç–∞ {room_code} –æ—Ç–∫—Ä—ã—Ç–∞!\n"
        f"–°—Ç–∞–≤–∫–∞: {amount} –∫–∞–ø–∏–±–∞—Ä\n"
        f"–£—á–∞—Å—Ç–≤—É–π, –æ—Ç–≤–µ—Ç–∏–≤ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∏—Å–ª–æ–º.\n"
        f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å 60 —Å–µ–∫.\n"
        f"–î–µ–ø–∞–ª—å—â–∏–∫–æ–≤: 1 (—Å—É–º–º–∞ –ø—É–ª–∞: {amount})"
    )

    rooms[room_code] = {
        "creator": user_id,
        "bet": amount,
        "players": {user_id: amount},
        "msg": room_msg,
        "active": True,
    }
    asyncio.create_task(countdown(room_code))

@ensure_registered
async def join_room(update: Update, context: ContextTypes.DEFAULT_TYPE):
    replied = update.message.reply_to_message
    if not replied:
        return
    room = next((r for r in rooms.values() if r["msg"].message_id == replied.message_id and r["active"]), None)
    if not room:
        return

    user_id = update.effective_user.id
    user = get_user(user_id)
    bet = room["bet"]

    if user["capybaras"] < bet:
        await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞–ø–∏–±–∞—Ä –¥–ª—è –¥–µ–ø–∞....")
        return

    if user_id in room["players"]:
        await update.message.reply_text("–¢—ã —É–∂–µ –¥–µ–ø–Ω—É–ª.")
        return

    user["capybaras"] -= bet
    save_user(user_id, user)
    room["players"][user_id] = bet
    await update.message.reply_text("–£—Ä–∞, –≤—ã –¥–µ–ø–Ω—É–ª–∏ —Å–≤–æ—é –∑–ø!")

async def countdown(room_id):
    for i in range(60, 0, -1):
        if room_id not in rooms or not rooms[room_id]["active"]:
            return
        if i % 3 == 0:  # –û–±–Ω–æ–≤–ª—è—Ç—å –∫–∞–∂–¥—É—é 3 —Å–µ–∫—É–Ω–¥—É
            msg = rooms[room_id]["msg"]
            try:
                await msg.edit_text(f"üé≤ –ö–æ–º–Ω–∞—Ç–∞ #{room_id} –æ—Ç–∫—Ä—ã—Ç–∞!\n"
                                    f"–¥–µ–ø: {rooms[room_id]['bet']} –∫–∞–ø–∏–±–∞—Ä\n"
                                    f"–¥–µ–ø–∞–ª—å—â–∏–∫–æ–≤: {len(rooms[room_id]['players'])}\n"
                                    f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {i} —Å–µ–∫.")
            except:
                pass
        await asyncio.sleep(1)

    if len(rooms[room_id]["players"]) < 2:
        await rooms[room_id]["msg"].reply_text("–ù–∏–∫—Ç–æ –Ω–µ –¥–µ–ø–Ω—É–ª. –ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        for uid, amount in rooms[room_id]["players"].items():
            user = get_user(uid)
            user["capybaras"] += amount
            save_user(uid, user)
    else:
        await spin_wheel(room_id)

    rooms[room_id]["active"] = False

import asyncio
import random
from db import get_user, save_user
from telegram.error import RetryAfter

async def safe_edit(msg, text):
    try:
        await msg.edit_text(text)
    except RetryAfter as e:
        await asyncio.sleep(e.retry_after)
        await msg.edit_text(text)
    except:
        pass

async def spin_wheel(room_id):
    room = rooms[room_id]
    players = list(room["players"].keys())
    # —Å–æ–∑–¥–∞—ë–º –ø—É–ª –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    pool = []
    for uid, bet in room["players"].items():
        pool.extend([uid] * bet)
    winner = random.choice(pool)
    total_pot = sum(room["players"].values())

    # —Å–æ–±–∏—Ä–∞–µ–º —Ü–∏–∫–ª –æ–±—Ö–æ–¥–∞: –∫–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ + –≤ –∫–æ–Ω—Ü–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å
    cycle = players * 3  # —Ç—Ä–∏ –ø–æ–ª–Ω—ã—Ö –∫—Ä—É–≥–∞
    cycle.append(winner)  # –∏ –æ–¥–Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞

    for pid in cycle:
        # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç: –∫—É–±–æ–∫ –Ω–∞–¥ pid, –æ—Å—Ç–∞–ª—å–Ω—ã–µ ‚Äî –Ω–∏–∂–µ
        cup = f"üèÜ @{get_user(pid)['name']}"
        others = [f"@{get_user(u)['name']}" for u in players if u != pid]
        text = "üé° –ö—Ä—É—Ç–∏–º –∫–æ–ª–µ—Å–æ...\n\n" + cup
        if others:
            text += "\n" + "\n".join(others)

        await safe_edit(room["msg"], text)
        # –ø–∞—É–∑–∞ –∫–æ—Ä–æ—á–µ –≤ –Ω–∞—á–∞–ª–µ, –ø–æ–¥–ª–∏–Ω–Ω–µ–µ –ø–µ—Ä–µ–¥ —Ñ–∏–Ω–∞–ª–æ–º
        if pid == winner:
            await asyncio.sleep(2)
        else:
            await asyncio.sleep(0.5)

    # –≤—ã–¥–∞—á–∞ –≤—ã–∏–≥—Ä—ã—à–∞
    user_win = get_user(winner)
    user_win["capybaras"] += total_pot
    save_user(winner, user_win)

    # —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await room["msg"].reply_text(
        f"üéâ –ü–æ–±–µ–¥–∏–ª @{user_win['name']} –∏ –∑–∞–±—Ä–∞–ª {total_pot} –∫–∞–ø–∏–±–∞—Ä!"
    )


async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = get_user(user_id)
    seconds = seconds_until_next_daily(user["last_daily"])
    timer = format_timer(seconds) if seconds else "–¥–æ—Å—Ç—É–ø–Ω–∞!"
    await update.message.reply_text(
        f"üë§ –ü—Ä–æ—Ñ–∏–ª—å @{user['name']}\n"
        f"ü™ô –ö–∞–ø–∏–±–∞—Ä—ã: {user['capybaras']}\n"
        f"üéÅ –ï–∂–µ–¥–Ω–µ–≤–∫–∞: {timer}"
    )

async def safe_edit_text(msg, text):
    try:
        await msg.edit_text(text)
    except RetryAfter as e:
        await asyncio.sleep(e.retry_after)
        await msg.edit_text(text)
    except Exception:
        pass