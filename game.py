import secrets
import asyncio
import random
from telegram import Update
from telegram.ext import ContextTypes, MessageHandler, filters
from telegram.error import RetryAfter
from db import get_user, save_user
from utils import ensure_registered, seconds_until_next_daily, format_timer

# –•—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç: –∫–æ–¥ -> –¥–∞–Ω–Ω—ã–µ
rooms = {}  # room_code -> {creator, min_bet, players, msg, active}

async def safe_edit(msg, text):
    try:
        await msg.edit_text(text)
    except RetryAfter as e:
        await asyncio.sleep(e.retry_after)
        await msg.edit_text(text)
    except:
        pass

@ensure_registered
async def create_room(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /dap <–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è_—Å—Ç–∞–≤–∫–∞>
    –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∫–æ–º–Ω–∞—Ç—É —Å –ª—é–±—ã–º–∏ –¥–µ–ø–∞–º–∏ –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, 
    –Ω–æ –Ω–µ –Ω–∏–∂–µ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—É–º–º—ã.
    """
    try:
        min_bet = int(context.args[0])
    except:
        return await update.message.reply_text("–£–∫–∞–∂–∏ —Å—É–º–º—É –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–∏: /dap 50")
    
    user_id = update.effective_user.id
    user = get_user(user_id)
    if user["capybaras"] < min_bet:
        return await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞–ø–∏–±–∞—Ä –¥–ª—è –¥–µ–ø–∞.")

    # —Å—Ä–∞–∑—É —Ä–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º —É —Å–æ–∑–¥–∞—Ç–µ–ª—è –µ–≥–æ —Å—Ç–∞–≤–∫—É–º–∏–Ω–∏–º—É–º
    user["capybaras"] -= min_bet
    save_user(user_id, user)

    room_code = secrets.token_hex(3)  # –Ω–∞–ø—Ä–∏–º–µ—Ä, 'a1b2c3'
    text = (
        f"üé≤ –ö–æ–º–Ω–∞—Ç–∞ {room_code} –æ—Ç–∫—Ä—ã—Ç–∞!\n"
        f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {min_bet} –∫–∞–ø–∏–±–∞—Ä\n"
        f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å 60 —Å–µ–∫.\n"
        f"üßë‚Äçü§ù‚Äçüßë –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: 1 (–ø–æ—Ç–æ–ª–æ–∫: {min_bet})\n\n"
        "–ß—Ç–æ–±—ã –∑–∞–π—Ç–∏ ‚Äî –æ—Ç–≤–µ—Ç—å –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∏—Å–ª–æ–º (–Ω–µ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–∏)."
    )
    room_msg = await update.message.reply_text(text)

    rooms[room_code] = {
        "creator": user_id,
        "min_bet": min_bet,
        "players": {user_id: min_bet},
        "msg": room_msg,
        "active": True,
    }
    asyncio.create_task(countdown(room_code))

async def handle_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –õ–æ–≤–∏—Ç –ª—é–±–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –∏ –ø—ã—Ç–∞–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å –¥–µ–ø.
    """
    replied = update.message.reply_to_message
    if not replied:
        return  # –Ω–µ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    # –Ω–∞—Ö–æ–¥–∏–º –∫–æ–º–Ω–∞—Ç—É –ø–æ ID —Å–æ–æ–±—â–µ–Ω–∏—è
    room = next(
        (r for r in rooms.values() if r["msg"].message_id == replied.message_id and r["active"]),
        None
    )
    if not room:
        return  # –Ω–µ –Ω–∞—à–∞ –∫–æ–º–Ω–∞—Ç–∞ –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç–∞

    # –ø–∞—Ä—Å–∏–º —á–∏—Å–ª–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞
    try:
        amount = int(update.message.text.strip())
    except ValueError:
        return  # –Ω–µ —á–∏—Å–ª–æ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º

    user_id = update.effective_user.id
    user = get_user(user_id)
    if amount < room["min_bet"]:
        return await update.message.reply_text(f"–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ {room['min_bet']} –∫–∞–ø–∏–±–∞—Ä.")
    if user["capybaras"] < amount:
        return await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞–ø–∏–±–∞—Ä –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞–≤–∫–∏.")
    if user_id in room["players"]:
        return await update.message.reply_text("–¢—ã —É–∂–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ.")

    # —Å–ø–∏—Å—ã–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    user["capybaras"] -= amount
    save_user(user_id, user)
    room["players"][user_id] = amount

    # –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã (—Å—á—ë—Ç—á–∏–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ —Å—É–º–º—É –ø—É–ª–∞)
    total_pool = sum(room["players"].values())
    await safe_edit(
        room["msg"],
        f"üé≤ –ö–æ–º–Ω–∞—Ç–∞ {next(code for code, data in rooms.items() if data is room)}\n"
        f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {room['min_bet']} –∫–∞–ø–∏–±–∞—Ä\n"
        f"üßë‚Äçü§ù‚Äçüßë –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(room['players'])} (–ø—É–ª: {total_pool})\n"
        f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: (—Ç–∞–π–º–µ—Ä –∏–¥—ë—Ç)\n\n"
        "–û—Ç–≤–µ—Ç—å —á–∏—Å–ª–æ–º, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è."
    )
    await update.message.reply_text(f"–¢–≤–æ—è —Å—Ç–∞–≤–∫–∞ {amount} –∫–∞–ø–∏–±–∞—Ä –ø—Ä–∏–Ω—è—Ç–∞! –£–¥–∞—á–∏!")

async def countdown(room_code: str):
    for i in range(60, 0, -1):
        room = rooms.get(room_code)
        if not room or not room["active"]:
            return
        if i % 5 == 0:  # –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫
            total_pool = sum(room["players"].values())
            await safe_edit(
                room["msg"],
                f"üé≤ –ö–æ–º–Ω–∞—Ç–∞ {room_code}\n"
                f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {room['min_bet']} –∫–∞–ø–∏–±–∞—Ä\n"
                f"üßë‚Äçü§ù‚Äçüßë –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(room['players'])} (–ø—É–ª: {total_pool})\n"
                f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {i} —Å–µ–∫.\n\n"
                "–û—Ç–≤–µ—Ç—å —á–∏—Å–ª–æ–º, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è."
            )
        await asyncio.sleep(1)

    room = rooms.get(room_code)
    if not room or not room["active"]:
        return

    if len(room["players"]) < 2:
        await room["msg"].reply_text("–ù–∏–∫—Ç–æ, –∫—Ä–æ–º–µ —Ç–µ–±—è, –Ω–µ —Å—Ç–∞–≤–∏–ª. –î–µ–ø –æ—Ç–º–µ–Ω—ë–Ω.")
        # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–≤–∫–∏
        for uid, amt in room["players"].items():
            u = get_user(uid)
            u["capybaras"] += amt
            save_user(uid, u)
    else:
        await spin_wheel(room_code)

    room["active"] = False

async def spin_wheel(room_code: str):
    room = rooms[room_code]
    players = list(room["players"].keys())
    # —Å–æ–∑–¥–∞—ë–º –ø—É–ª –¥–ª—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
    pool = []
    for uid, bet in room["players"].items():
        pool += [uid] * bet
    winner = random.choice(pool)
    total_pot = sum(room["players"].values())

    # –∞–Ω–∏–º–∞—Ü–∏—è –∫—Ä—É—á–µ–Ω–∏—è
    sequence = players * 2 + [winner]
    for pid in sequence:
        cup = f"üèÜ @{get_user(pid)['name']}"
        others = "\n".join(f"@{get_user(u)['name']}" for u in players if u != pid)
        text = f"üé° –ö—Ä—É—Ç–∏–º –∫–æ–ª–µ—Å–æ...\n\n{cup}"
        if others:
            text += "\n" + others
        await safe_edit(room["msg"], text)
        await asyncio.sleep(0.3 if pid != winner else 1.5)

    # –≤—ã–¥–∞—á–∞ –≤—ã–∏–≥—Ä—ã—à–∞
    win = get_user(winner)
    win["capybaras"] += total_pot
    save_user(winner, win)
    await room["msg"].reply_text(f"üéâ –ü–æ–±–µ–¥–∏–ª @{win['name']} –∏ –∑–∞–±—Ä–∞–ª –≤–µ—Å—å –ø—É–ª: {total_pot} –∫–∞–ø–∏–±–∞—Ä!")

@ensure_registered
async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = get_user(user_id)
    secs = seconds_until_next_daily(user["last_daily"])
    timer = format_timer(secs) if secs else "–¥–æ—Å—Ç—É–ø–Ω–∞!"
    await update.message.reply_text(
        f"üë§ –ü—Ä–æ—Ñ–∏–ª—å @{user['name']}\n"
        f"ü™ô –ö–∞–ø–∏–±–∞—Ä—ã: {user['capybaras']}\n"
        f"üéÅ –ï–∂–µ–¥–Ω–µ–≤–∫–∞: {timer}"
    )