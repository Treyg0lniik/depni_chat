from datetime import datetime
from telegram import Update
from telegram.ext import ContextTypes, CommandHandler, MessageHandler, filters
from db import add_chat, get_user, save_user, get_all_users
from utils import ensure_registered, seconds_until_next_daily, format_timer, is_admin
from config import ADMIN_ID, ADMIN_USERNAME
from telegram import InputFile
from db import get_backup, get_user, save_user, give_capybaras, get_all_chats
from game import create_room, join_room, show_profile

DAILY_REWARD = 1000

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = get_user(update.effective_user.id)
    user["name"] = update.effective_user.username or update.effective_user.first_name
    save_user(update.effective_user.id, user)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Ç, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ª–∏—á–∫–∞
    if update.effective_chat.type != "private":
        add_chat(update.effective_chat.id, update.effective_chat.title)

    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¥–µ–ø –∫–∞–∑–∏–Ω–æ! üé∞\n –¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø—ã—Ç–∞—Ç—å —Å–≤–æ—é —É–¥–∞—á—É! –°–∫–æ—Ä–µ–µ –ø–∏—à–∏—Ç–µ /daily –∏ /dap !")

@ensure_registered
async def daily(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = get_user(user_id)

    if seconds_until_next_daily(user["last_daily"]) > 0:
        await update.message.reply_text("–¢—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É —Å–µ–≥–æ–¥–Ω—è.")
        return

    user["capybaras"] += DAILY_REWARD
    user["last_daily"] = datetime.now().isoformat()
    save_user(user_id, user)
    await update.message.reply_text(f"–¢—ã –ø–æ–ª—É—á–∏–ª {DAILY_REWARD} ü™ô –∫–∞–ø–∏–±–∞—Ä!")

async def top(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users = get_all_users()
    sorted_users = sorted(users.items(), key=lambda x: x[1]["capybaras"], reverse=True)[:10]
    text = "üèÜ –¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤:\n"
    for i, (uid, data) in enumerate(sorted_users, 1):
        text += f"{i}. @{data['name']}: {data['capybaras']} –∫–∞–ø–∏–±–∞—Ä\n"
    await update.message.reply_text(text)

async def backup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await is_admin(update):
        with get_backup() as f:
            await update.message.reply_document(InputFile(f, filename="backup.json"))
    else:
        await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±—ç–∫–∞–ø—É.")

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_profile(update, context)

async def handle_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await join_room(update, context)

async def cmd_give(update: Update, context: ContextTypes.DEFAULT_TYPE):
    sender = update.effective_user
    if sender.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    if len(context.args) != 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /give @username 100")
        return

    username = context.args[0].lstrip("@")
    try:
        amount = int(context.args[1])
    except ValueError:
        await update.message.reply_text("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    from db import find_user_by_username, give_capybaras

    user_id, user = find_user_by_username(username)
    if user is None:
        await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    new_balance = give_capybaras(user_id, amount)
    await update.message.reply_text(f"‚úÖ –í—ã–¥–∞–Ω–æ {amount} –∫–∞–ø–∏–±–∞—Ä @{username}. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}")

async def admin_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    sender = update.effective_user
    if sender.username != ADMIN_USERNAME:
        return  # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —á—É–∂–∏–µ –õ–°

    text = update.message.text
    if not text.startswith("broadcast "):
        return

    message = text[len("broadcast "):]
    chats = get_all_chats()
    count = 0

    for chat_id in chats:
        try:
            await context.bot.send_message(chat_id, message)
            count += 1
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}: {e}")

    await update.message.reply_text(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ –≤ {count} —á–∞—Ç–æ–≤.")

def register_handlers(app):
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("daily", daily))
    app.add_handler(CommandHandler("top", top))
    app.add_handler(CommandHandler("backup", backup))
    app.add_handler(CommandHandler("profile", profile))
    app.add_handler(MessageHandler(filters.TEXT & filters.REPLY, handle_reply))


